plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Javalin is a web framework for Java and Kotlin.
	implementation 'io.javalin:javalin:6.7.0'
	shadow 'io.javalin:javalin:6.7.0'

	// add in jackson-databind
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
	shadow 'com.fasterxml.jackson.core:jackson-databind:2.18.2'
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
	options.debug = true
	options.compilerArgs << "-g"
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

shadowJar {
	configurations = [project.configurations.shadow]
	archiveClassifier = 'fat'
	
	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

remapJar {
	inputFile = shadowJar.archiveFile
	dependsOn shadowJar
	archiveClassifier = 'fat-remapped'
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

// Docker tasks using Gradle exec
def dockerImageName = "minecraft-fabric-server"
// def dockerImageTag = "${dockerImageName}:${project.version}"
// def dockerImageLatest = "${dockerImageName}:latest"

task dockerBuild(type: Exec) {
	group = 'docker'
	description = 'Build Docker image'
	dependsOn remapJar
	
	commandLine 'docker', 'build', 
		'--build-arg', "JAR_FILE=${remapJar.archiveFileName.get()}",
		'--build-arg', "VERSION=${project.version}",
		'-t', dockerImageName,
		'.'
	
	doFirst {
		println "Building Docker image: ${dockerImageName}"
	}
	
	doLast {
		println "Docker image built successfully:"
		println "  ${dockerImageName}"
		// println "  ${dockerImageLatest}"
	}
}

task dockerRun(type: Exec) {
	group = 'docker'
	description = 'Build and run Docker container'
	dependsOn dockerBuild
	
	commandLine 'docker', 'run', '-d',
		'-p', '25565:25565',
		'-p', '7070:7070',
		'--name', 'minecraft-fabric-server',
		dockerImageName
	
	doFirst {
		// Stop and remove existing container if it exists
		exec {
			commandLine 'docker', 'stop', 'minecraft-fabric-server'
			ignoreExitValue = true
		}
		exec {
			commandLine 'docker', 'rm', 'minecraft-fabric-server'
			ignoreExitValue = true
		}
	}
	
	doLast {
		println "Docker container started: minecraft-fabric-server"
		println "Minecraft server: localhost:25565"
		println "API server: http://localhost:7070"
	}
}

task dockerStop(type: Exec) {
	group = 'docker'
	description = 'Stop and remove Docker container'
	
	commandLine 'docker', 'stop', 'minecraft-fabric-server'
	
	doLast {
		exec {
			commandLine 'docker', 'rm', 'minecraft-fabric-server'
			ignoreExitValue = true
		}
		println "Docker container stopped and removed"
	}
}

task dockerLogs(type: Exec) {
	group = 'docker'
	description = 'View Docker container logs'
	
	commandLine 'docker', 'logs', '-f', 'minecraft-fabric-server'
}

task dockerPush(type: Exec) {
	group = 'docker'
	description = 'Push Docker image to registry'
	dependsOn dockerBuild
	
	commandLine 'docker', 'push', dockerImageName
	
	doLast {
		exec {
			commandLine 'docker', 'push', dockerImageName
		}
		println "Docker images pushed to registry"
	}
}

task dockerCompose(type: Exec) {
	group = 'docker'
	description = 'Start services using docker-compose'
	
	commandLine 'docker-compose', 'up', '-d'
	
	doLast {
		println "Docker Compose services started"
		println "Use 'docker-compose logs -f' to view logs"
		println "Use 'docker-compose down' to stop services"
	}
}